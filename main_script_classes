import tkinter as tk
from tkinter import ttk
from tkinter.ttk import Notebook, Style
from tkinter import * 
from tkinterdnd2 import *
import fillpdf
from fillpdf import fillpdfs
from abc import ABC, abstractmethod

class Model:
    self.seawave_check = tk.IntVar(name='seawave_check')
    self.primetime_check = tk.IntVar(name='primetime_check')
    self.newhampshire_check = tk.IntVar(name='newhampshire_check')
    self.americanmodern_check = tk.IntVar(name='americanmodern_check')
    self.kemah_check = tk.IntVar(name='kemah_check')
    self.concept_check = tk.IntVar(name='concept_check')
    self.yachtinsure_check = tk.IntVar(name='yachtinsure_check')
    self.century_check = tk.IntVar(name='century_check')
    self.intact_check = tk.IntVar(name='intact_check')
    self.travelers_check = tk.IntVar(name='travelers_check')
    self.cc_default_check = tk.IntVar(name='cc_default_check')
    self.attachments = []
    self.last_name = ''
    self.first_name = ''
    self.year = 0
    self.make = ''
    self.length = 0
    self.cc_addresses = ''
    self.dropdown_email_template = StringVar(value='Select Carrier')
    self.carrier_address_placeholder = ''
    self.carrier_body_placeholder = ''
    self.carrier_greeting_placeholder = ''
    self.carrier_salutation_placeholder = ''
    self.options = [
        'Select Carrier',
        'Seawave',
        'Prime Time',
        'New Hampshire',
        'American Modern',
        'Kemah',
        'Concept',
        'Yachtinsure',
        'Century',
        'Intact',
        'Travelers',
        'Combo SW and PT',
        'Combo SW and NH',
        'Combo SW, PT and NH',
        'Combo PT and NH'
        ]
    default_cc_address_1_value = ''
    default_cc_address_1_value = ''

class View(ABC):
    @abstractmethod
    def setup(self, controller):
        pass

    @abstractmethod
    def createStyle(self):
        pass

    @abstractmethod
    def createNotebook(self, main):
        pass

    @abstractmethod
    def createTabs(self, main):
        pass

    @abstractmethod        
     def createMainTabWidgets(self, main):
        pass

    @abstractmethod
     def createTemplateSettingsTabWidgets(self, main):
        pass

    @abstractmethod
    def createSettingsTabWidgets():
        pass

    @abstractmethod
    def insert_placeholders():
        pass

    @abstractmethod
    def disableField(self, item):
        pass

    @abstractmethod
    def disableField(self, item):
        pass

    @abstractmethod
    def start_main_loop(self):
        pass

class Controller:
    def __init__(self, model: Model, view: View)
        self.model = model
        self.view = view

    def start(self):
        self.view.setup(self)
        self.view.start_main_loop()
        self.setInitialView()

    def setInitialView(self)
        self.view.

class TkView(View):
    def setup(self, controller):
        self.root = tk.Tk()
        self.root.geometry('760x548')
        self.root.configure(background='#5F9EA0')
        self.root.title('Quick Submit Tool')
        self.root.attributes('-alpha',0.95)

        self.createStyle()
        self.createNotebook()
        self.createTabs()
        self.createMainTabWidgets()
        self.createTemplateSettingsTabWidgets()
        self.createSettingsTabWidgets()
        #self.root.insert_placeholders()
    
    def createStyle(self):
        self.style = Style()
        self.style.theme_use('default')
        self.style.configure('TNotebook', background='#5F9EA0')
        self.style.configure('TFrame', background='#5F9EA0')
        self.style.map('TNotebook', background= [('selected', '#5F9EA0')])

    def createNotebook(self):
        self.tabControl = ttk.Notebook(self.root, style=self.style)

    def createTabs(self):
        self.home = ttk.Frame(self.tabControl)
        self.template_settings = ttk.Frame(self.tabControl)
        self.settings = ttk.Frame(self.tabControl)
        self.tabControl.add(self.home, text='Main')
        self.tabControl.add(self.template_settings, text='Templates')
        self.tabControl.add(self.settings, text='Settings')
        
    def createMainTabWidgets(self):
        # Add the frames to the tab
        frame_header = Frame(self.home, bg='#5F9EA0', pady=17)
        frame_header.pack(padx=5, fill=X, expand=False)

        frame_left = Frame(self.home, bg='#5F9EA0')
        frame_left.pack(padx=5, fill = Y, side='left', expand = False, anchor=NE)

        frame_middle = Frame(self.home, bg='#5F9EA0')
        frame_middle.pack(padx=5, fill = Y, side='left', expand = False, anchor=N)

        frame_right = Frame(self.home, bg='#5F9EA0')
        frame_right.pack(padx=5, fill = Y, side='left', expand = False, anchor=NW)

        # Create widgets inside Frame Header
        Label(frame_header, text='Get Client Information', bg='#5F9EA0', font=('helvetica', 20, 'normal')).pack(fill=X, expand=True, side='left')
        Label(frame_header, text='Extra Notes & CC', bg='#5F9EA0', font=('helvetica', 20, 'normal')).pack(fill=X, expand=True, side='left')
        Label(frame_header, text='Choose Markets:', bg='#5F9EA0', font=('helvetica', 20, 'normal')).pack(fill=X, expand=True, side='left')

        # Create widgets inside Frame Left
        Label(frame_left, text='Dag-N-Drop Quoteform Below', bg='#aedadb', font=('helvetica', 12, 'normal')).pack(fill=BOTH, expand=True)

        self.textarea = Text(frame_left, height=7, width=27, background='#59f3e3', name='raw_quoteform_path')
        self.textarea.pack(fill=BOTH, anchor=N, expand=True)

        Label(frame_left, text='Dag-N-Drop Extra Attachments Below', bg='#aedadb', font=('helvetica', 12, 'normal')).pack(fill=BOTH, expand=True)

        self.attachmentsarea = Text(frame_left, height=9, width=27, background='#59f3e3', name='raw_list_of_attachments_paths')
        self.attachmentsarea.pack(fill=X, expand=True, anchor=N)

        # Create widgets inside Frame Middle
        
        # this is a label_frame
        addNotes_labelframe = LabelFrame(frame_middle, text= 'To end with a message, enter it below:', bg='#aedadb', font=('helvetica', 8, 'normal'))
        addNotes_labelframe.pack(fill=X, expand=False, side='top')

        self.additional_email_body_notes = Text(addNotes_labelframe, height=7, width=30, name='raw_additional_body_notes')
        self.additional_email_body_notes.pack(fill = X, anchor=N, expand=FALSE, side='top')
        # end of label_frame

        # this is a label_frame
        cc_labelframe = LabelFrame(frame_middle, text= 'CC-address settings for this submission:', bg='#aedadb', name='cc_labelframe')
        cc_labelframe.pack(fill=X, expand=True, side='top')

        self.cc_def_check = Checkbutton(cc_labelframe, text='Check to ignore default CC-addresses.', variable=self.cc_default_check, bg='#aedadb', name='cc_def_chcek').pack(pady=5, fill=X, expand=False, side='top')

        Label(cc_labelframe, text='email address to CC:', bg='#aedadb', font=('helvetica', 12, 'normal')).pack(fill=X, expand=True, side='top')

        self.cc_address_1_user_input = Text(cc_labelframe, height=1, width=30)
        self.cc_address_1_user_input.pack(pady=2, ipady=4, anchor=N, fill = X, expand=True, side='top')

        Label(cc_labelframe, text='email address to CC:', bg='#aedadb', font=('helvetica', 12, 'normal')).pack(fill=X, expand=True, side='top')

        self.cc_address_2_user_input = Text(cc_labelframe, height=1, width=30)
        self.cc_address_2_user_input.pack(ipady=4, anchor=N, fill = X, expand=True, side='top')
        # end of label_frame

        
        # Create widgets inside Frame Right

        seawave = Checkbutton(frame_right, text='Seawave Insurance', variable=self.seawave_check, bg='#aedadb', font=('helvetica', 12, 'normal'))
        seawave.pack(ipady=3, fill=BOTH, expand=True)
       
        primetime = Checkbutton(frame_right, text='Prime Time Insurance', variable=primetime_check, bg='#aedadb', font=('helvetica', 12, 'normal'))
        primetime.pack(ipady=3, fill=BOTH, expand=True)
        
        newhampshire = Checkbutton(frame_right, text='New Hampshire', variable=newhampshire_check, bg='#aedadb', font=('helvetica', 12, 'normal'))
        newhampshire.pack(ipady=3, fill=BOTH, expand=True)
        
        americanmodern = Checkbutton(frame_right, text='American Modern', variable=americanmodern_check, bg='#aedadb', font=('helvetica', 12, 'normal'))
        americanmodern.pack(ipady=3, fill=BOTH, expand=True)
        
        kemah = Checkbutton(frame_right, text='Kemah Marine', variable=kemah_check, bg='#aedadb', font=('helvetica', 12, 'normal'))
        kemah.pack(ipady=3, fill=BOTH, expand=True)
        
        concept = Checkbutton(frame_right, text='Concept Special ', variable=concept_check, bg='#aedadb', font=('helvetica', 12, 'normal'))
        concept.pack(ipady=3, fill=BOTH, expand=True)
        
        yachtinsure = Checkbutton(frame_right, text='Yachtinsure', variable=yachtinsure_check, bg='#aedadb', font=('helvetica', 12, 'normal'))
        yachtinsure.pack(ipady=3, fill=BOTH, expand=True)
        
        century = Checkbutton(frame_right, text='Century Insurance', variable=century_check, bg='#aedadb', font=('helvetica', 12, 'normal'))
        century.pack(ipady=3, fill=BOTH, expand=True)
        
        intact = Checkbutton(frame_right, text='Intact', variable=intact_check, bg='#aedadb', font=('helvetica', 12, 'normal'))
        intact.pack(ipady=3, fill=BOTH, expand=True)
        
        travelers = Checkbutton(frame_right, text='Travelers', variable=travelers_check, bg='#aedadb', font=('helvetica', 12, 'normal'))
        travelers.pack(ipady=3, fill=BOTH, expand=True)
        # End of creating the MAIN tab widgets
        
    def createTemplateSettingsTabWidgets():
        # Add the frames to tab
        e_frame_header_spacer = Frame(self.template_settings, bg='#5F9EA0', height=17)
        e_frame_header_spacer.pack(fill=X, expand=False)

        e_frame_header = Frame(self.template_settings, bg='#5F9EA0')
        e_frame_header.pack(padx=5, fill = X, expand=True)

        e_frame_top = Frame(self.template_settings, bg='#5F9EA0')
        e_frame_top.pack(fill=BOTH, expand=False)

        e_frame_content = Frame(self.template_settings, bg='#5F9EA0')
        e_frame_content.pack(fill=BOTH, expand=False, anchor=N)

        e_frame_bottomL = Frame(self.template_settings, bg='#5F9EA0' )
        e_frame_bottomL.pack(fill=X, expand=True, side='left', anchor=N)

        e_frame_bottomR = Frame(self.template_settings, bg='#5F9EA0')
        e_frame_bottomR.pack(fill=X, expand=True, side='left', anchor=N)
        
        # Crfeate widgets for the Header Frame
        Label(e_frame_header, text = 'Adjust the Default Email Templates for Each Carrier', bg='#5F9EA0', font=('helvetica', 16, 'normal')).pack(fill = X, expand=True, side='top')
        
        Label(e_frame_header, text = 'Your name (used in Signature):', bg='#aedadb', font=('helvetica', 12, 'normal')).pack(padx=4, pady=5, fill=BOTH, expand=True, side='left', anchor=E)
        
        self.your_name_placeholder = getyourName()
        
        self.your_name = Entry(e_frame_header)
        self.your_name.pack(ipadx=900, pady=5, fill=BOTH, expand=True, side='right', anchor=NW)
        # End of Header
        
        # Create widgets for the Top Frame
        Label(e_frame_top, text = "This drop-down menu allows you to view & edit a specific carrier's, or combo carriers', email message contents.", bg='#5F9EA0', font=('helvetica', 10, 'normal')).pack(fill = X, expand=True)

        #drop = OptionMenu(e_frame_top, dropdown_email_template, 'Select Carrier', *options)
        # The above line includes a default value choice,  whereas below doesn't. above could reduce redundancy ny deleting 'Select Carrier' from options list
        self.drop = OptionMenu(e_frame_top, self.dropdown_email_template, *options)
        self.drop.configure(background='#aedadb', foreground='black', highlightbackground='#5F9EA0', activebackground='#5F9EA0')
        self.drop['menu'].configure(background='#aedadb')
        self.dropdown_email_template.trace_add('write', updateCarrierChoice)drop.pack(padx=15, ipady=5, fill = X, expand=True) # MOVE TO CONTROLLER?
        # End of Top Frame

        # Create widgets for the Bottom Left Frames
        Label(e_frame_bottomL, text = 'Submission Address:', bg='#aedadb', font=('helvetica', 16, 'normal')).pack(padx=2, pady=15, fill=BOTH, expand=True, anchor=E, side='top')
        Label(e_frame_bottomL, text = 'Greeting:', bg='#aedadb', font=('helvetica', 16, 'normal')).pack(padx=2, fill=BOTH, expand=True, anchor=E, side='top')
        Label(e_frame_bottomL, text = 'Body of the email:', bg='#aedadb', font=('helvetica', 16, 'normal')).pack(padx=2, pady=15, fill=BOTH, expand=True, anchor=E, side='top')
        Label(e_frame_bottomL, text = 'Salutation:', bg='#aedadb', font=('helvetica', 16, 'normal')).pack(padx=2, pady=63, fill=BOTH, expand=True, anchor=E, side='top')

        # Create widgets for the Bottom Right Frames
        self.carrier_address = Entry(e_frame_bottomR)
        self.carrier_address.pack(padx=4, pady=15, ipadx=160, ipady=5, fill=BOTH, expand=False, side='top')
        
        self.carrier_greeting = Entry(e_frame_bottomR)
        self.carrier_greeting_focus_out = carrier_greeting.bind('<FocusOut>', lambda x: on_focus_out_entry(carrier_greeting, 'greeting'))
        self.carrier_greeting.pack(padx=4, pady=1, ipadx=160, ipady=5, fill=BOTH, expand=False, side='top')
        
        self.carrier_body = Text(e_frame_bottomR, width=10, height=5)
        self.carrier_body_focus_out = carrier_body.bind('<FocusOut>', lambda x: on_focus_out_text(carrier_body, 'body'))
        self.carrier_body.pack(padx=4, pady=15, ipadx=160, ipady=5, fill=BOTH, expand=False, side='top')
        
        self.carrier_salutation = Entry(e_frame_bottomR, width=27, highlightbackground='green', highlightcolor='red')
        self.carrier_salutation_focus_out = carrier_salutation.bind('<FocusOut>', lambda x: on_focus_out_entry(carrier_salutation, 'salutation'))
        self.carrier_salutation.pack(padx=4, ipadx=160, ipady=5, fill=BOTH, expand=False, side='top')
        
        self.btnSaveEmailTemplate = Button(e_frame_bottomR, text = 'Click to SAVE template for this market, & save your name!', bg='#22c26a', command = controller.btnSaveCarrierTemplate).pack(padx=4, pady=20, ipady=50, fill=X, expand=False, anchor=S, side='bottom')

    def createSettingsStabWidgets():
        # Create frames for the tab
        entry_boxes_frame = Frame(settings, bg='#5F9EA0')
        entry_boxes_frame.pack(fill=BOTH, expand=False, side='top')

        save_btn_frame = Frame(settings, bg='#5F9EA0')
        save_btn_frame.pack(fill=BOTH, expand=False, side='top')

        # Header
        Label(self.root.settings, text='Settings Page', bg='#5F9EA0', font=('helvetica', 20, 'normal')).pack(fill=BOTH, expand=False, side='top')
        
        # content
        Label(settings, text='CC-address Settings (more to be added later or upon your request)', bg='#5F9EA0', font=('helvetica', 14, 'normal')).pack(fill=X, expand=False, side='top')
        
        Label(entry_boxes_frame, text='1st address to set as default cc: ', bg='#aedadb', font=('helvetica', 12, 'normal')).pack(pady=3, ipady=2, padx=1, fill='none', expand=False, side='left', anchor=NW)
        
        self.default_cc_address_1_var = Entry(entry_boxes_frame,textvariable=self.default_cc_address_1_value)
        self.default_cc_address_1_var.pack(pady=3, fill=X, ipadx=10, ipady=4, expand=True, side='left', anchor=N)
        
        Label(entry_boxes_frame, text='2nd address to set as default cc: ', bg='#aedadb', font=('helvetica', 12, 'normal')).pack(pady=3, ipady=2, padx=1, fill='none', expand=False, side='left', anchor=NW)
        
        self.default_cc_address_2_var = Entry(entry_boxes_frame, textvariable=self.default_cc_address_2_value)
        self.default_cc_address_2_var.pack(pady=3, fill=X, ipadx=10, ipady=4, expand=True, side='left', anchor=N)
        
        Button(save_btn_frame, text='Save Settings!', bg='#22c26a', font=('helvetica', 12, 'normal'), command=controller.btnSaveMainSettings).pack(ipady=10, pady=10, padx=10, fill=BOTH, expand=False, anchor=N, side='top')

    def insert_placeholder(self, item, indx, placeholder: str):
        self.item = item
        self.item_to_modify.insert(indx, placeholder)

    def delete_placeholder(self, item, indx):
        self.item.delete(indx, 'end')

    def enableField(self, item, wrap):
        item.configure(state='normal')

    def disableField(self, item):
        item.configure(state='disabled')

# def main():
#     root = Tk()
#     app = QuickSubmitTool(root)
#     app.mainloop()

# if __name__ == '__main__':
#     main()

c = Controller(Model(), TkView())
c.start()